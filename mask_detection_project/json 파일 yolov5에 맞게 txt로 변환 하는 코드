# 이미지 높이와 넓이에 맞춰서 함수에 넣어주면된다 다만 json 파일마다 공식이 다를수 있다

def generate_yolo_label(i, yolo_class, image_width=4032, image_height=3024):
    with open(i, 'r') as f:
        data = json.load(f)

    landmark_coordinates = data['figures'][0]['shape']['coordinates']
    x_coordinates, y_coordinates = zip(*landmark_coordinates)

    # 바운딩 박스의 좌표 계산
    min_x = np.min(x_coordinates)
    max_x = np.max(x_coordinates)
    min_y = np.min(y_coordinates)
    max_y = np.max(y_coordinates)

    # 바운딩 박스의 중심 좌표 계산
    box_width = max_x - min_x
    box_height = max_y - min_y
    center_x = (max_x + min_x) / 2
    center_y = (max_y + min_y) / 2

    # YOLO 라벨 형식으로 변환
    yolo_x = center_x / image_width
    yolo_y = center_y / image_height
    yolo_width = box_width / image_width
    yolo_height = box_height / image_height


# json 파일 txt로 yolov5 형식에 맞게 변환후 내가 원하는 폴더에 넣기

import numpy as np
import json
import glob
import os
import re

base_dir = r'C:\start\labels\2699'
output_dir = r'C:\start\labels\lab'
os.makedirs(output_dir, exist_ok=True)

json_file_list = glob.glob(base_dir + '/*.json')

for json_src in json_file_list:
    yolo_class = int(os.path.splitext(os.path.basename(json_src))[0][-1]) - 1
    yolo_label = generate_yolo_label(json_src, yolo_class)
    txt_dest = os.path.join(output_dir, os.path.splitext(os.path.basename(json_src))[0]) + '.txt'

    with open(txt_dest, 'w') as f:
        f.write("%s\n" % yolo_label)
        f.close()

    if os.path.exists(txt_dest):
        print(f"JSON {os.path.basename(json_src)} was successfully converted to txt and saved in the output folder")
    else:
        print(f"Failed to convert JSON {os.path.basename(json_src)} to txt and save in the output folder")

    # YOLO 라벨 출력
    return f"{yolo_class} {yolo_x:.6f} {yolo_y:.6f} {yolo_width:.6f} {yolo_height:.6f}"
